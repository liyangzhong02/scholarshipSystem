{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"@/router/index\";\nconst request = axios.create({\n  baseURL: '/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n  // config.headers['token'] = user.token;  // 设置请求头\n  config.baseURL = 'http://localhost:8081'; //\n\n  //取出sessionstorage里缓存的用户信息 默认取出的是Json字符串\n  let userJson = sessionStorage.getItem(\"student\");\n  if (!userJson) {\n    //userJson为空代表着没登录 直接强制登陆\n    //记得引入router...\n\n    router.push(\"/login\");\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data; //默认有data这个属性，所有返回的数据存在data里\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据 转换成对象\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","use","config","headers","userJson","sessionStorage","getItem","push","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"sources":["E:/Documents/Code/Java/2023database-master/vue3/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from \"@/router/index\";\nconst request = axios.create({\n    baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n    timeout: 5000\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n    // config.headers['token'] = user.token;  // 设置请求头\n    config.baseURL = 'http://localhost:8081'; //\n\n    //取出sessionstorage里缓存的用户信息 默认取出的是Json字符串\n    let userJson = sessionStorage.getItem(\"student\")\n    if(!userJson) {\n\n        //userJson为空代表着没登录 直接强制登陆\n        //记得引入router...\n\n        router.push(\"/login\")\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data; //默认有data这个属性，所有返回的数据存在data里\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据 转换成对象\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,gBAAgB;AACnC,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAE,MAAM;EAAG;EAClBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;;AAEAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;;EAEjE;EACAD,MAAM,CAACJ,OAAO,GAAG,uBAAuB,CAAC,CAAC;;EAE1C;EACA,IAAIM,QAAQ,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;EAChD,IAAG,CAACF,QAAQ,EAAE;IAEV;IACA;;IAEAT,MAAM,CAACY,IAAI,CAAC,QAAQ,CAAC;EACzB;EACA,OAAOL,MAAM;AACjB,CAAC,EAAEM,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAZ,OAAO,CAACI,YAAY,CAACW,QAAQ,CAACV,GAAG,CAC7BU,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC;EACzB;EACA,IAAIF,QAAQ,CAACT,MAAM,CAACY,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOF,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLS,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGV,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAeZ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}